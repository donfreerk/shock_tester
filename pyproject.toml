# pyproject.toml für Fahrwerkstester Projekt
[project]
name = "fahrwerkstester"
version = "2.0.0"
description = "Moderner Fahrwerkstester mit EGEA-konformer Phase-Shift-Analyse"
authors = [
    { name = "Fahrwerkstester Team", email = "team@fahrwerkstester.de" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
keywords = ["automotive", "suspension", "testing", "can-bus", "mqtt", "egea"]

dependencies = [
    # Core Dependencies
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    # MQTT & Communication
    "paho-mqtt>=1.6.0",
    "asyncio-mqtt>=0.13.0",
    # CAN-Bus
    "python-can>=4.0.0",
    # Configuration & Serialization
    "pyyaml>=5.4.0",
    "pydantic>=1.8.0", # Windows/macOS
    # Utilities
    "click>=8.0.0",
    "python-dotenv>=0.19.0",
    "logger>=1.4",
]

[project.optional-dependencies]
# Development Dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=0.991",
    "flake8>=5.0.0",
    "pre-commit>=2.20.0",
]

# Pi-spezifische Dependencies
pi = [
    "RPi.GPIO>=0.7.1; platform_machine == 'armv7l' or platform_machine == 'aarch64'",
    "spidev>=3.5; platform_machine == 'armv7l' or platform_machine == 'aarch64'",
    "smbus2>=0.4.0; platform_machine == 'armv7l' or platform_machine == 'aarch64'",
]

# Performance-Optimierungen
performance = [
    "numba>=0.56.0",
    "cython>=0.29.0",
]

# GUI-spezifische Dependencies
gui = [
    "pillow>=9.0.0",
    "matplotlib>=3.5.0",
]

# Alle optionalen Dependencies
all = [
    "fahrwerkstester[dev,pi,performance,gui]"
]

[project.scripts]
# Hauptservices
pi-processing = "backend.pi_processing_service.main:main"
hardware-bridge = "hardware.enhanced_hardware_bridge:main"
simulator-service = "backend.can_simulator_service.main:main"

# GUI-Anwendungen
suspension-gui = "frontend.desktop_gui.simplified_gui:main"
simulator-gui = "frontend.desktop_gui.simulator_gui:main"

# Utilities
mqtt-monitor = "mqtt_monitor:main"

[project.urls]
Homepage = "https://github.com/fahrwerkstester/fahrwerkstester"
Repository = "https://github.com/fahrwerkstester/fahrwerkstester.git"
Documentation = "https://fahrwerkstester.readthedocs.io/"
"Bug Tracker" = "https://github.com/fahrwerkstester/fahrwerkstester/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = [
    "backend",
    "frontend",
    "common/suspension_core",
    "hardware"
]

# Black Code Formatter
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Import Sorter
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["suspension_core", "backend", "frontend", "hardware"]

# MyPy Type Checker
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Schrittweise Einführung
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# MyPy per-module options
[[tool.mypy.overrides]]
module = [
    "paho.mqtt.*",
    "can.*",
    "matplotlib.*",
    "numpy.*",
    "scipy.*",
    "tkinter.*",
    "serial.*",
    "RPi.*"
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=backend",
    "--cov=frontend",
    "--cov=common/suspension_core",
    "--cov-report=html",
    "--cov-report=term-missing",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "hardware: marks tests that require actual hardware",
    "pi: marks tests that require Raspberry Pi",
    "gui: marks tests that require GUI",
    "mqtt: marks tests that require MQTT broker",
    "can: marks tests that require CAN interface",
]

# Coverage Configuration
[tool.coverage.run]
source = [
    "backend/",
    "frontend/",
    "common/suspension_core/",
    "hardware/"
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"

# Flake8 Linter Configuration  
[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203", # whitespace before ':'
    "E501", # line too long (handled by black)
    "W503", # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    ".venv",
    "venv",
]
per-file-ignores = [
    "__init__.py:F401", # unused imports in __init__.py files
    "test_*.py:E501", # long lines in tests are ok
]

# Pre-commit Hooks Configuration
[[tool.pre-commit.repos]]
repo = "https://github.com/pre-commit/pre-commit-hooks"
rev = "v4.4.0"
hooks = [
    "check-yaml",
    "end-of-file-fixer",
    "trailing-whitespace",
    "check-merge-conflict",
    "check-added-large-files",
]

[[tool.pre-commit.repos]]
repo = "https://github.com/psf/black"
rev = "22.12.0"
hooks = ["black"]

[[tool.pre-commit.repos]]
repo = "https://github.com/pycqa/isort"
rev = "5.11.4"
hooks = ["isort"]

[[tool.pre-commit.repos]]
repo = "https://github.com/pycqa/flake8"
rev = "6.0.0"
hooks = ["flake8"]

[[tool.pre-commit.repos]]
repo = "https://github.com/pre-commit/mirrors-mypy"
rev = "v0.991"
hooks = ["mypy"]

# Custom Configuration Sections
[tool.fahrwerkstester]
# Projektspezifische Konfiguration

# Entwicklungsumgebung
[tool.fahrwerkstester.development]
auto_reload = true
debug_mode = true
log_level = "DEBUG"

# Produktionsumgebung  
[tool.fahrwerkstester.production]
auto_reload = false
debug_mode = false
log_level = "INFO"

# Pi-Spezifische Konfiguration
[tool.fahrwerkstester.pi]
enable_gpio = true
enable_can = true
enable_i2c = true
performance_mode = "balanced"  # "performance" | "balanced" | "power_save"

# GUI-Konfiguration
[tool.fahrwerkstester.gui]
theme = "default"
update_interval = 100  # ms
max_history = 50
enable_animations = true

# Service-Konfiguration
[tool.fahrwerkstester.services]
# MQTT
mqtt_broker = "localhost"
mqtt_port = 1883
mqtt_keepalive = 60

# CAN-Bus
can_interface = "can0"
can_baudrate = 1000000

# Processing
processing_threads = 1
max_queue_size = 1000
